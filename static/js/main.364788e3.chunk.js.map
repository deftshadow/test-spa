{"version":3,"sources":["components/Post/Post.module.css","containers/Posts/Posts.module.css","Context.js","hoc/Auxilliary.js","components/Post/Post.js","containers/Posts/Posts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Context","React","createContext","Aux","props","children","Post","currentDate","useContext","deviceWidth","date","Date","post","datetaken","secondsAgo","Math","floor","monthsAgo","description","_content","length","slice","title","postContent","avatarURL","iconfarm","iconserver","owner","photoURL","farm","server","id","secret","daysAgo","hoursAgo","minutesAgo","postHeader","className","classes","Header","User","Avatar","src","alt","UserInfo","UserName","ownername","DateTaken","postDescription","Description","Likes","LikeButton","onClick","likeClicked","LikesCount","count_faves","console","log","PhotoWrapper","PostInfo","Posts","useState","content","setContent","useMediaQuery","query","likeButtonHandler","alert","useEffect","fetch","then","response","json","photos","photo","map","index","key","Provider","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.364788e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Post\":\"Post_Post__2zBWx\",\"PhotoWrapper\":\"Post_PhotoWrapper__317Vt\",\"PostInfo\":\"Post_PostInfo__1-R2V\",\"Avatar\":\"Post_Avatar__1_Y24\",\"Header\":\"Post_Header__2srPK\",\"User\":\"Post_User__1DL0k\",\"UserName\":\"Post_UserName__2pPvD\",\"DateTaken\":\"Post_DateTaken__2-fJy\",\"Description\":\"Post_Description__3hr8m\",\"Likes\":\"Post_Likes__1nygl\",\"LikesCount\":\"Post_LikesCount__3zgBg\",\"LikeButton\":\"Post_LikeButton__36kL-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Posts\":\"Posts_Posts__2rMw5\"};","import React from \"react\";\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context;","const Aux = (props) => props.children\r\n\r\nexport default Aux;","import React, { useContext } from \"react\";\r\nimport Context from \"../../Context\";\r\nimport Aux from \"../../hoc/Auxilliary\";\r\nimport classes from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n  const { currentDate } = useContext(Context);\r\n  const { deviceWidth } = useContext(Context);\r\n  let date = new Date(props.post.datetaken);\r\n  const secondsAgo = Math.floor((currentDate - date) / 1000);\r\n  const monthsAgo = Math.floor(secondsAgo / (3600 * 24 * 30));\r\n  let description =\r\n    props.post.description._content.length > 150\r\n      ? props.post.description._content.slice(0, 150) + \"...\"\r\n      : props.post.description._content;\r\n  let title =\r\n    props.post.title.length > 15\r\n      ? props.post.title.slice(0, 15) + \"...\"\r\n      : props.post.title;\r\n  let postContent = null;\r\n  const avatarURL = `http://farm${props.post.iconfarm}.staticflickr.com/${props.post.iconserver}/buddyicons/${props.post.owner}.jpg`;\r\n  const photoURL = `https://farm${props.post.farm}.staticflickr.com/${props.post.server}/${props.post.id}_${props.post.secret}.jpg`;\r\n\r\n  if (monthsAgo >= 12) {\r\n    date = `${(monthsAgo % 12) + 1}y`;\r\n  } else if (monthsAgo < 12 && monthsAgo >= 1) {\r\n    date = `${monthsAgo}mo`;\r\n  } else if (monthsAgo < 1) {\r\n    const daysAgo = Math.floor(secondsAgo / (3600 * 24));\r\n    if (daysAgo >= 1) {\r\n      date = `${daysAgo}d`;\r\n    } else {\r\n      const hoursAgo = Math.floor(secondsAgo / 3600);\r\n      if (hoursAgo >= 1) {\r\n        date = `${hoursAgo}`;\r\n      } else {\r\n        const minutesAgo = Math.floor(secondsAgo / 60);\r\n        date = minutesAgo >= 1 ? `${minutesAgo}m` : `${secondsAgo}s`;\r\n      }\r\n    }\r\n  }\r\n\r\n  const postHeader = (\r\n    <header className={classes.Header}>\r\n      <span className={classes.User}>\r\n        <img className={classes.Avatar} src={avatarURL} alt=\"avatar\" />\r\n        <div className={classes.UserInfo}>\r\n          <div className={classes.UserName}>{props.post.ownername}</div>\r\n          <div>{title}</div>\r\n        </div>\r\n      </span>\r\n      <div className={classes.DateTaken}>{date}</div>\r\n    </header>\r\n  );\r\n\r\n  const postDescription = (\r\n    <div className={classes.Description}>\r\n      <div className={classes.Likes}>\r\n        <div className={classes.LikeButton}>\r\n          <button\r\n            className={classes.LikeButton}\r\n            onClick={() => {\r\n              props.likeClicked(props.post.id);\r\n            }}\r\n          >\r\n            <i className=\"material-icons\">favorite_border</i>\r\n          </button>\r\n        </div>\r\n        <span className={classes.LikesCount}>{props.post.count_faves}</span>\r\n      </div>\r\n      <div className={classes.Description}>{description}</div>\r\n    </div>\r\n  );\r\n\r\n  if (!deviceWidth) {\r\n    postContent = (\r\n      <div className={classes.Post}>\r\n        <img className={classes.PhotoWrapper} src={photoURL} alt=\"post\" />\r\n        <div className={classes.PostInfo}>\r\n          {postHeader}\r\n          <hr />\r\n          {postDescription}\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    console.log(\"here\");\r\n    postContent = (\r\n      <div className={classes.Post}>\r\n        {postHeader}\r\n        <img className={classes.PhotoWrapper} src={photoURL} alt=\"post\" />\r\n        <div className={classes.PostInfo}>\r\n         {postDescription}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <Aux>{postContent}</Aux>;\r\n};\r\n\r\nexport default Post;\r\n","import React, { useState, useEffect} from \"react\";\r\nimport Post from \"../../components/Post/Post\";\r\nimport Context from '../../Context'\r\nimport classes from './Posts.module.css'\r\nimport { useMediaQuery } from 'react-responsive'\r\n\r\nconst Posts = () => {\r\n  const [content, setContent] = useState(null);\r\n  const deviceWidth = useMediaQuery({query: '(min-width: 600px)'})\r\n  const currentDate = new Date()\r\n\r\n  const likeButtonHandler = (id) => {\r\n    alert(`ID записи: ${id}`)\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      \"https://www.flickr.com/services/rest/?method=flickr.interestingness.getList&api_key=eaa15ee1ac19253f934f20e0f5853517&extras=icon_server%2C+description%2C+owner_name%2C+date_taken%2C+count_faves&per_page=20&page=1&format=json&nojsoncallback=1\"\r\n    )\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        console.log(response);\r\n        setContent(\r\n          response.photos.photo.map((post, index) => {\r\n            return (\r\n              <Post\r\n                key={response.photos.photo[index].id}\r\n                post={response.photos.photo[index]}\r\n                likeClicked={likeButtonHandler}\r\n              />\r\n            );\r\n          })\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <Context.Provider value={{currentDate, deviceWidth}}>\r\n      {<div className={classes.Posts}>{content}</div>}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Post from \"./components/Post/Post\";\nimport Posts from \"./containers/Posts/Posts\";\n\nfunction App() {\n  return (\n    <div>\n      <Posts />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}