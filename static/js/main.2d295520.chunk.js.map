{"version":3,"sources":["components/Post/Post.module.css","components/Post/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","post","props","fetch","mode","then","response","console","log","className","classes","Post","PostPhoto","src","alt","App","useState","useEffect","method","headers","json","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,UAAY,0B,kMC0BzCC,EAxBF,SAACC,GAGZ,OAFEC,MAAM,6FAA8F,CAACC,KAAM,YAC1GC,MAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,MAE9B,yBAAKG,UAAWC,IAAQC,MACtB,yBAAKF,UAAWC,IAAQE,UAAWC,IAAI,IAAIC,IAAI,eAC/C,6BACE,6BACE,yBAAKD,IAAI,IAAIC,IAAI,WACjB,uCACA,uCACA,wCAEF,6BACA,8BACE,yBAAKD,IAAI,IAAIC,IAAI,UACjB,+CAEF,iDCgBOC,MAjCf,WAAgB,IAAD,EACuBC,oBAAS,GADhC,mBAwBb,OAxBa,UAGbC,qBAAU,WACRd,MACE,wEACA,CACEe,OAAQ,MACRC,QAAS,CACP,kBAAmB,4BACnB,iBACE,wDAILd,MAAK,SAACC,GAAD,OAAeA,EAASc,UAC7Bf,MAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,MAC7Be,OAAM,SAACC,GACNf,QAAQC,IAAIc,SAOhB,6BACE,kBAACX,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,QCpBcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdhB,OAAM,SAAAiB,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.2d295520.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Post\":\"Post_Post__2zBWx\",\"PostPhoto\":\"Post_PostPhoto__2QU8y\"};","import React from \"react\";\r\nimport classes from \"./Post.module.css\";\r\n\r\nconst post = (props) => {\r\n    fetch('https://api.vk.com/method/newsfeed.getRecommended?PARAMETERS&access_token=ACCESS_TOKEN&v=V', {mode: 'no-cors'})\r\n    .then(response => console.log(response))\r\n  return (\r\n    <div className={classes.Post}>\r\n      <img className={classes.PostPhoto} src=\"#\" alt=\"post-photo\" />\r\n      <div>\r\n        <div>\r\n          <img src=\"#\" alt=\"avatar\" />\r\n          <p>Nickname</p>\r\n          <p>Location</p>\r\n          <p>Time ago</p>\r\n        </div>\r\n        <hr />\r\n        <span>\r\n          <img src=\"#\" alt=\"likes\" />\r\n          <p>amount of likes</p>\r\n        </span>\r\n        <section>Some text</section>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default post;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Post from \"./components/Post/Post\";\n\nfunction App() {\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n\n  useEffect(() => {\n    fetch(\n      \"https://instagram9.p.rapidapi.com/api/instagram?username=nasa&lang=en\",\n      {\n        method: \"GET\",\n        headers: {\n          \"x-rapidapi-host\": \"instagram9.p.rapidapi.com\",\n          \"x-rapidapi-key\":\n            \"78ddc84288msh6cbc2d8beb7c4adp1042cbjsne9d138636f7c\",\n        },\n      }\n    )\n      .then((response) => (response.json()))\n      .then(response => console.log(response))\n      .catch((err) => {\n        console.log(err);\n      });\n\n    //window.location.href = 'https://oauth.vk.com/authorize?client_id=7608018&display=page&redirect_uri=http://localhost:3000&scope=friends,wall&response_type=token&v=5.124&state=123456'\n  });\n\n  return (\n    <div>\n      <Post />\n      <Post />\n      <Post />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}